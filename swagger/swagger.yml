openapi: 3.0.1
info:
  title: Project Tracking Software
  description: 'This is a sample server Project Tracking Software.  You can find out more about     Swagger
    at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For
    this sample, you can use the api key `special-key` to test the authorization     filters.'
  contact:
    email: ayman.patel97@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: https://projecttracking.swagger.io/v2
tags:
- name: user
  description: Operations about user
  externalDocs:
    description: Find out more about our store
    url: http://swagger.io    
- name: users
  description: Operations about user
  externalDocs:
    description: Find out more about our store
    url: http://swagger.io
paths:


  /users:
    get:
      tags:
      - users
      summary: Find all users
      description: Returns all users
      operationId: getUsers
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: User not found
          content: {}

  /user/{userId}:
    get:
      tags:
      - user
      summary: Find user by Id
      description: Returns a single user
      operationId: getUserById
      parameters:
      - name: userId
        in: path
        description: ID of user to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:

            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: User not found
          content: {}
    post:
      tags:
      - user
      summary: Save a user by Id
      operationId: saveUser
      parameters:
      - name: userId
        in: path
        description: ID of user that needs to be updated
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                name:
                  type: string
                  description: Updated name of the user
                status:
                  type: string
                  description: Updated status of the user
      responses:
        200:
          description: Request succesful
        405:
          description: Invalid input
          content: {}
        
    put:
      tags:
      - user
      summary: Updates a user by Id
      operationId: updateUser
      parameters:
      - name: userId
        in: path
        description: ID of user that needs to be updated
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                name:
                  type: string
                  description: Updated name of the user
                status:
                  type: string
                  description: Updated status of the user
      responses:
        204:
          description: Request succesful
        405:
          description: Invalid input
          content: {}
    delete:
      tags:
      - user
      summary: Deletes a user
      operationId: deleteUser
      parameters:
      - name: userId
        in: path
        description: Pet id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Pet not found
          content: {}
      security:
      - petstore_auth:
        - write:pets
        - read:pets

components:
  schemas:


    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      xml:
        name: User

    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://petstore.swagger.io/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
